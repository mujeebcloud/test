# =================================================================
# GOOGLE MANAGED SERVICE MESH (ASM) vs. UNMANAGED ISTIO - COMPLETE GUIDE
# Includes: Core Differences, Envoy Sidecar, Ingress Gateway, CLI Commands
# =================================================================

# ----------------------------
# PART 1: MANAGED VS. UNMANAGED SERVICE MESH
# ----------------------------

## 1.1 Control Plane Comparison
| Feature                | Managed (Anthos Service Mesh - ASM)       | Unmanaged (Self-hosted Istio)          |
|------------------------|-------------------------------------------|----------------------------------------|
| **Deployment**         | Google-hosted istiod                      | Self-hosted in-cluster istiod          |
| **Upgrades**           | Automatic                                 | Manual                                 |
| **Multi-cloud**        | ✅ GKE/AKS/EKS/On-prem                   | ❌ Complex setup                       |
| **Security**           | Google-managed certs (auto-rotated)       | Manual cert management                 |
| **Observability**      | Built-in Cloud Monitoring                 | DIY (Prometheus/Grafana)               |
| **Cost**               | Premium pricing                           | Free (with operational overhead)       |

## 1.2 When to Choose?
- **Use ASM If**: You want zero control-plane management, multi-cloud support, or lack Istio expertise.
- **Use Istio If**: You need full customization or run outside GCP.

# ----------------------------
# PART 2: ENVOY SIDECAR MANAGEMENT
# ----------------------------

## 2.1 Sidecar Injection
# Enable injection for a namespace
kubectl label namespace <NAMESPACE> istio-injection=enabled

# Verify injection
kubectl get pods -n <NAMESPACE> -o jsonpath='{.spec.containers[*].name}' | grep istio-proxy

## 2.2 Sidecar Debugging
# Get Envoy config dump
kubectl exec <POD> -c istio-proxy -- curl http://localhost:15000/config_dump

# Check active clusters (upstream services)
kubectl exec <POD> -c istio-proxy -- curl http://localhost:15000/clusters

# View metrics (Prometheus format)
kubectl exec <POD> -c istio-proxy -- curl http://localhost:15000/stats/prometheus

## 2.3 Troubleshooting
# View logs
kubectl logs <POD> -c istio-proxy

# Force config reload
kubectl exec <POD> -c istio-proxy -- curl -XPOST http://localhost:15000/reload

# ----------------------------
# PART 3: INGRESS GATEWAY SETUP
# ----------------------------

## 3.1 Deploy Gateway
# Apply Gateway resource
cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: asm-ingressgateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
EOF

## 3.2 Route Traffic
# Create VirtualService
cat <<EOF | kubectl apply -f -
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: frontend
spec:
  hosts:
  - "example.com"
  gateways:
  - istio-system/asm-ingressgateway
  http:
  - route:
    - destination:
        host: frontend.default.svc.cluster.local
        port:
          number: 80
EOF

## 3.3 Gateway Admin
# Get external IP
kubectl get svc istio-ingressgateway -n istio-system

# Test routing
curl -H "Host: example.com" http://$INGRESS_IP

# Enable HTTPS
kubectl create secret tls my-cert --key key.pem --cert cert.pem -n istio-system

# ----------------------------
# PART 4: TRAFFIC FLOW DIAGRAM
# ----------------------------
External User → [Ingress Gateway] → [VirtualService] → [Microservice Pod]
↑
[Google-managed istiod (ASM)]

text

# ----------------------------
# PART 5: TROUBLESHOOTING COMMANDS
# ----------------------------

## 5.1 Common Issues
| Symptom               | Debug Command                              | Likely Fix                             |
|-----------------------|--------------------------------------------|----------------------------------------|
| 503 errors           | kubectl exec <GATEWAY_POD> -c istio-proxy -- curl localhost:15000/clusters | Check backend pods       |
| TLS failures         | kubectl get secret -n istio-system         | Verify certs are valid                |
| No external IP       | gcloud compute forwarding-rules list       | Check GCP LB quota                    |

## 5.2 GCP-Specific Tools
# Check ASM status
gcloud container hub mesh describe

# View Cloud Logs
gcloud logging read 'resource.type="k8s_container" resource.labels.container_name="istio-proxy"'

# ----------------------------
# PART 6: SUMMARY CHEAT SHEET
# ----------------------------

# 1. Managed ASM: Google handles istiod, use for multi-cloud
# 2. Sidecars: Monitor with /stats, /clusters endpoints
# 3. Ingress: Always check VirtualService + Gateway alignment
# 4. TLS: Use Google-managed certs or provide your own
# 5. Alerts: Set up for 5xx errors and latency spikes

# =================================================================
# END OF GUIDE
# =================================================================
